diff --git a/CadicalWrap.h b/CadicalWrap.h
index 732f73b..2d93ec8 100644
--- a/CadicalWrap.h
+++ b/CadicalWrap.h
@@ -21,52 +21,304 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #define CadicalWrap_h
 
 #include "cadical.hpp"
-#include "signal.hpp"
-#include "mtl/Vec.h"
 #include "core/SolverTypes.h"
+#include "crossy.h"
+#include "mtl/Vec.h"
+#include "signal.hpp"
+#include <bits/stdc++.h>
+
+using vi = std::vector<int>;
+using vvi = std::vector<std::vector<int>>;
+
+struct OnlineCycleDetection {
+    struct ring_buffer {
+        unsigned N;
+        std::vector<uint16_t> data;
+        int head, tail;
+        ring_buffer(unsigned n) {
+            n = std::max(n, 1u << 10);
+            N = std::bit_ceil(n);
+            data = std::vector<uint16_t>(N);
+            --N;
+            head = tail = 0;
+        }
+        void clear() { head = tail = 0; }
+        void push(uint16_t x) {
+            data[tail++] = x;
+            tail &= N;
+        }
+        uint16_t pop() {
+            uint16_t x = data[head++];
+            head &= N;
+            return x;
+        }
+        [[nodiscard]] inline bool empty() const { return head == tail; }
+    };
+    ring_buffer hq;
+    std::vector<std::vector<uint16_t>> g;
+    std::vector<std::pair<uint16_t, uint16_t>> history;
+    std::vector<uint16_t> history_e;
+    std::vector<std::pair<uint32_t, uint32_t>> commits;
+    std::vector<uint16_t> L, par;
+    std::vector<uint32_t> par_time;
+    uint32_t mtime = 0;
+
+    using vvb = std::vector<std::vector<bool>>;
+    static vvb transitive_closure(vvb g) {
+        int n = std::ssize(g);
+        for (int k = 0; k < n; k++)
+            for (int i = 0; i < n; i++)
+                for (int j = 0; j < n; j++)
+                    g[i][j] = g[i][j] || (g[i][k] && g[k][j]);
+        return g;
+    }
+    static vvb matmul(const vvb &a, const vvb &b) {
+        int n = std::ssize(a);
+        vvb c(n, std::vector<bool>(n));
+        for (int i = 0; i < n; i++)
+            for (int j = 0; j < n; j++)
+                for (int k = 0; k < n; k++)
+                    c[i][j] = c[i][j] || (a[i][k] && b[k][j]);
+        return c;
+    }
+    static vvb transitive_reduction(const vvb &g) {
+        auto closure = transitive_closure(g);
+        auto prod = matmul(g, closure);
+        vvb red(g);
+        for (int i = 0; i < std::ssize(g); i++)
+            for (int j = 0; j < std::ssize(g); j++)
+                red[i][j] = g[i][j] && !prod[i][j];
+        return red;
+    }
+
+    explicit OnlineCycleDetection(crossy_data data)
+        : hq(data.n * data.n), g(data.n), L(data.n), par(data.n), par_time(data.n) {
+        history.reserve(data.n * data.n + 100);
+        history_e.reserve(data.n * data.n + 100);
+        std::vector<std::vector<bool>> is_spine(data.n, std::vector<bool>(data.n));
+        for (int i = 0; i < data.n; i++)
+            for (int j = 0; j < data.n; j++)
+                is_spine[i][j] = data.is_fixed[i * data.n + j];
+
+        auto red = transitive_reduction(is_spine);
+
+        std::vector gT(data.n, std::vector<int>());
+        for (int i = 0; i < data.n; i++)
+            for (int j = 0; j < data.n; j++)
+                if (red[i][j]) {
+                    g[i].emplace_back(j);
+                    gT[j].emplace_back(i);
+                }
+
+        std::vector<bool> visited(data.n);
+        std::function<void(int)> dfs = [&](int u) {
+            visited[u] = true;
+            int depth = 0;
+            for (int v : gT[u]) {
+                if (!visited[v])
+                    dfs(v);
+                depth = std::max(depth, L[v] + 1);
+            }
+            L[u] = depth;
+        };
+        for (int i = 0; i < data.n; i++)
+            if (!visited[i])
+                dfs(i);
+
+        commit();
+    }
+
+    auto naive_bfs(int s, int t) {
+        const int n = std::ssize(g);
+        std::vector<bool> vis(n);
+        std::vector<int> path(n, -1);
+        std::queue<int> q;
+        q.push(s);
+        vis[s] = true;
+        while (!q.empty()) {
+            int u = q.front();
+            q.pop();
+            for (int v : g[u]) {
+                if (!vis[v]) {
+                    vis[v] = true;
+                    path[v] = u;
+                    q.push(v);
+                }
+            }
+        }
+        std::vector<std::vector<int>> out(1);
+        for (int u = t; u != -1; u = path[u])
+            out.back().emplace_back(u);
+        std::reverse(out.back().begin(), out.back().end());
+        out.back().emplace_back(s);
+        return out;
+    }
+
+    inline void set(uint16_t x, uint16_t y) {
+        history.emplace_back(x, L[x]);
+        L[x] = y;
+    }
+    bool prop(uint16_t s, uint16_t t) {
+        mtime++;
+        if (L[s] < L[t])
+            return false;
+        set(t, L[s] + 1);
+        hq.clear();
+        hq.push(t);
+        while (!hq.empty()) {
+            auto u = hq.pop();
+            for (uint16_t v : g[u]) {
+                if (L[u] < L[v])
+                    continue;
+                if (par_time[v] != mtime)
+                    par[v] = u, par_time[v] = mtime;
+                if (v == s)
+                    return true;
+                set(v, L[u] + 1);
+                hq.push(v);
+            }
+        }
+        return false;
+    }
+
+    std::optional<std::vector<std::vector<int>>> add_edge(int a, int b) {
+        if (prop(a, b)) {
+            uint16_t v = a;
+            vi cycle{b};
+            while (v != b) {
+                cycle.emplace_back(v);
+                if (par_time[v] != mtime)
+                    exit(42);
+                v = par[v];
+            }
+            cycle.emplace_back(b);
+            std::ranges::reverse(cycle);
+            return vvi{cycle};
+        }
+        g[a].emplace_back(b);
+        history_e.emplace_back(a);
+        return std::nullopt;
+    }
+
+    void rollback(int t) {
+        auto [ht, het] = commits[t];
+        commits.resize(t + 1);
+        while (history.size() > ht) L[history.back().first] = history.back().second, history.pop_back();
+        while (history_e.size() > het) g[history_e.back()].pop_back(), history_e.pop_back();
+    }
+
+    void commit() { commits.emplace_back(history.size(), history_e.size()); }
+};
+
+class ExternalPropagator : public CaDiCaL::ExternalPropagator {
+  public:
+    OnlineCycleDetection ocd;
+    std::vector<std::vector<int>> c, var;
+    std::vector<std::pair<int, int>> lookup;
+
+    ExternalPropagator(crossy_data data) : ocd(data), var(data.n, std::vector<int>(data.n)) {
+        int n = data.n;
+        for (int i = 0; i < n; i++) {
+            for (int j = 0; j < n; j++) {
+                if (data.is_edge[i * n + j] && !data.is_fixed[i * n + j]) {
+                    lookup.emplace_back(i, j);
+                    var[i][j] = lookup.size();
+                }
+            }
+        }
+    }
+
+    void notify_assignment(int lit, bool is_fixed) {
+        if (lit > 0)
+            return;
+        if (!c.empty())
+            return;
+        auto [u, v] = lookup[-lit - 1];
+        if (is_fixed) {
+            auto cycle = ocd.add_edge(u, v);
+            if (cycle)
+                exit(0xBC); // Bad cycle
+        } else {
+            auto cycle = ocd.add_edge(u, v);
+            if (cycle) {
+                c.reserve(c.size() + cycle->size());
+                std::move(cycle->begin(), cycle->end(), std::back_inserter(c));
+                cycle->clear();
+            }
+        }
+    }
+    void notify_new_decision_level() { ocd.commit(); }
+    void notify_backtrack(size_t new_level) { ocd.rollback(new_level); }
+    bool cb_has_external_clause() {
+        bool x = !c.empty();
+        return x;
+    }
+    int cb_decide() { return 0; }
+    int cb_propagate() { return 0; }
+    int cb_add_reason_clause_lit(int) { return 0; }
+    bool cb_check_found_model(const std::vector<int> &) { return true; }
+    int cb_add_external_clause_lit() {
+        if (c.empty())
+            return 0;
+        auto &cycle = c.back();
+        int lit = 0;
+        while (!lit) {
+            if (cycle.size() == 1) {
+                c.pop_back();
+                return 0;
+            }
+            lit = var[end(cycle)[-2]][cycle.back()];
+            cycle.pop_back();
+        }
+        return lit;
+    }
+};
 
 extern int opt_cpu_lim;
 
 namespace COMinisatPS {
 
 class SimpSolver {
-public:
+  public:
     CaDiCaL::Solver *solver;
 
     class AlarmTerm : public CaDiCaL::Handler, public CaDiCaL::Terminator {
-    public:
+      public:
         volatile static bool timesup;
 
         // Handler interface.
-        void catch_signal (int ) { }
-        void catch_alarm () { timesup = true; }
+        void catch_signal(int) {}
+        void catch_alarm() { timesup = true; }
         // Terminator interface.
         bool terminate() { return timesup; }
     } alarm_term;
 
-private:
+  private:
     int nvars, nclauses, old_verbosity;
 
-    int lit2val(Lit p) {
-        return sign(p) ? -var(p)-1 : var(p)+1;
-    }
+    int lit2val(Lit p) { return sign(p) ? -var(p) - 1 : var(p) + 1; }
 
     class IpasirTerm : public CaDiCaL::Terminator {
-    public:
-        void * state;
-        int (*function) (void *);
+      public:
+        void *state;
+        int (*function)(void *);
 
         IpasirTerm() : state(nullptr), function(nullptr) {}
-        bool terminate () { return function == nullptr ? false : function(state); }
+        bool terminate() { return function == nullptr ? false : function(state); }
     } terminator;
 
-public:
+  public:
     vec<Lit> conflict;
     int verbosity;
     uint64_t conflicts;
 
-    SimpSolver() : nvars(0), nclauses(0), conflicts(0) {
+    // crossy's ExternalPropagator
+    ExternalPropagator *externalPropagator;
+
+    SimpSolver(crossy_data data)
+        : nvars(0), nclauses(0), conflicts(0), externalPropagator(new ExternalPropagator(data)) {
         solver = new CaDiCaL::Solver;
+        solver->connect_external_propagator(externalPropagator);
         limitTime(opt_cpu_lim);
         verbosity = old_verbosity = solver->get("verbose");
     }
@@ -84,50 +336,80 @@ public:
 #endif
     }
 
-    void setTermCallback(void * state, int (*terminate)(void *)) {
-        terminator.state = state; terminator.function = terminate;
-        if (terminator.function != nullptr) solver->connect_terminator(&terminator);
-        else solver->disconnect_terminator();
+    void setTermCallback(void *state, int (*terminate)(void *)) {
+        terminator.state = state;
+        terminator.function = terminate;
+        if (terminator.function != nullptr)
+            solver->connect_terminator(&terminator);
+        else
+            solver->disconnect_terminator();
     }
 
     Var newVar(bool polarity = true, bool dvar = true) {
-        (void)polarity; (void)dvar;
+        (void)polarity;
+        (void)dvar;
         Var v = nvars++;
-        solver->reserve((int)(v+1));
+        solver->reserve((int)(v + 1));
+        if (v < std::ssize(externalPropagator->lookup))
+            solver->add_observed_var(v + 1);
         return v;
     }
-    int  nVars() const { return nvars; }
-    int  nFreeVars() const { return nvars; }
-    int  nClauses() const { return nclauses; }
+    int nVars() const { return nvars; }
+    int nFreeVars() const { return nvars; }
+    int nClauses() const { return nclauses; }
     void setPolarity(Var, bool) { /* unsupported */ }
-    void setFrozen(Var , bool ) { /* not needed */ }
+    void setFrozen(Var, bool) { /* not needed */ }
 
-    bool addClause(const vec<Lit>& cl) {
-        for (int i = 0; i < cl.size(); i++) solver->add(lit2val(cl[i]));
-        solver->add(0); nclauses++; return true;
+    bool addClause(const vec<Lit> &cl) {
+        for (int i = 0; i < cl.size(); i++)
+            solver->add(lit2val(cl[i]));
+        solver->add(0);
+        nclauses++;
+        return true;
+    }
+    bool addEmptyClause() {
+        solver->add(0);
+        nclauses++;
+        return true;
+    }
+    bool addClause(Lit p) {
+        solver->add(lit2val(p));
+        solver->add(0);
+        nclauses++;
+        return true;
+    }
+    bool addClause(Lit p, Lit q) {
+        solver->add(lit2val(p));
+        solver->add(lit2val(q));
+        solver->add(0);
+        nclauses++;
+        return true;
+    }
+    bool addClause(Lit p, Lit q, Lit r) {
+        solver->add(lit2val(p));
+        solver->add(lit2val(q));
+        solver->add(lit2val(r));
+        solver->add(0);
+        nclauses++;
+        return true;
     }
-    bool addEmptyClause() { 
-        solver->add(0); nclauses++; return true; }
-    bool addClause(Lit p) { 
-        solver->add(lit2val(p)); solver->add(0); nclauses++; return true; }
-    bool addClause(Lit p, Lit q) { 
-        solver->add(lit2val(p)); solver->add(lit2val(q)); solver->add(0); nclauses++; return true; }
-    bool addClause(Lit p, Lit q, Lit r) { 
-        solver->add(lit2val(p)); solver->add(lit2val(q)); solver->add(lit2val(r)); solver->add(0);
-        nclauses++; return true; }
-    bool addClause_(vec<Lit>& cl) { return addClause(cl); }
+    bool addClause_(vec<Lit> &cl) { return addClause(cl); }
 
-    bool okay() { return ! solver->inconsistent(); }
+    bool okay() { return !solver->inconsistent(); }
 
     void interrupt() { solver->terminate(); }
-    void clearInterrupt() { }
+    void clearInterrupt() {}
 
     void setConfBudget(int x) { solver->limit("conflicts", x); }
     void budgetOff() { solver->limit("conflicts", -1); }
 
     lbool solveLimited() {
-        if (verbosity < 0) verbosity = 0; else if (verbosity > 3) verbosity = 3;
-        if (verbosity != old_verbosity) solver->set("verbose", old_verbosity = verbosity);
+        if (verbosity < 0)
+            verbosity = 0;
+        else if (verbosity > 3)
+            verbosity = 3;
+        if (verbosity != old_verbosity)
+            solver->set("verbose", old_verbosity = verbosity);
 
         int ret = solver->solve();
         conflicts = solver->conflicts();
@@ -139,18 +421,20 @@ public:
         assert(ret != l_Undef);
         return ret == l_True;
     }
-    lbool solveLimited(const vec<Lit>& assumps) {
+    lbool solveLimited(const vec<Lit> &assumps) {
         for (int i = 0; i < assumps.size(); i++)
-            if (toInt(assumps[i]) >= 0) solver->assume(lit2val(assumps[i]));
+            if (toInt(assumps[i]) >= 0)
+                solver->assume(lit2val(assumps[i]));
         lbool ret = solveLimited();
         if (ret == l_False) {
             conflict.clear();
             for (int i = 0; i < assumps.size(); i++)
-                if (toInt(assumps[i]) >= 0 && solver->failed(lit2val(assumps[i]))) conflict.push(~assumps[i]);
+                if (toInt(assumps[i]) >= 0 && solver->failed(lit2val(assumps[i])))
+                    conflict.push(~assumps[i]);
         }
         return ret;
     }
-    bool solve(const vec<Lit>& assumps) {
+    bool solve(const vec<Lit> &assumps) {
         budgetOff();
         lbool ret = solveLimited(assumps);
         assert(ret != l_Undef);
@@ -160,24 +444,30 @@ public:
     bool isEliminated(Var) { /* not needed */ return false; }
 
     lbool value(Var v) const {
-        int val = solver->fixed(v+1);
+        int val = solver->fixed(v + 1);
         return val == 0 ? l_Undef : (val > 0 ? l_True : l_False);
     }
     lbool value(Lit p) const {
         lbool val = value(var(p));
-        if (sign(p)) 
-            if (val == l_True) val = l_False; else if (val == l_False) val = l_True;
+        if (sign(p))
+            if (val == l_True)
+                val = l_False;
+            else if (val == l_False)
+                val = l_True;
         return val;
     }
 
     lbool modelValue(Var v) const {
-        int val = solver->val(v+1);
+        int val = solver->val(v + 1);
         return val == 0 ? l_Undef : (val > 0 ? l_True : l_False);
     }
     lbool modelValue(Lit p) const {
         lbool val = modelValue(var(p));
-        if (sign(p)) 
-            if (val == l_True) val = l_False; else if (val == l_False) val = l_True;
+        if (sign(p))
+            if (val == l_True)
+                val = l_False;
+            else if (val == l_False)
+                val = l_True;
         return val;
     }
 
@@ -185,6 +475,6 @@ public:
     void statistics() { solver->statistics(); }
 };
 
-}
+} // namespace COMinisatPS
 
 #endif
diff --git a/Main.cc b/Main.cc
index 9d5341b..ecfcfa3 100755
--- a/Main.cc
+++ b/Main.cc
@@ -34,12 +34,14 @@ Read a DIMACS file and apply the SAT-solver to it.
 #include <atomic>
 #include <chrono>
 #include <thread>
+#include <cassert>
 #include "System.h"
 #include "MsSolver.h"
 #include "PbParser.h"
 #include "FEnv.h"
 #include "Main_utils.h"
 
+
 #ifdef MAXPRE
 #include "preprocessorinterface.hpp"
 #endif
@@ -57,7 +59,8 @@ int main(int argc, char** argv)
 #endif
   try {
     setOptions(argc, argv);
-    pb_solver = new MsSolver(true, opt_preprocess);
+    assert(false); // (this code is not supposed to be executed)
+    pb_solver = new MsSolver(crossy_data(), true, opt_preprocess);
     signal(SIGINT , SIGINT_handler);
     signal(SIGTERM, SIGTERM_handler);
 
diff --git a/MsSolver.h b/MsSolver.h
index 7385518..af2ee81 100755
--- a/MsSolver.h
+++ b/MsSolver.h
@@ -25,6 +25,7 @@
 #include "PbSolver.h"
 #include "VecMaps.h"
 #include "Sort.h"
+#include "crossy.h"
 
 enum OptFinder {OPT_NONE, OPT_SCIP, OPT_MSAT};
 
@@ -97,8 +98,8 @@ struct AtMost1 {
 
 class MsSolver final : public PbSolver {
   public:
-    MsSolver(bool print_info = true, bool use_preprocessing = false)
-        : PbSolver(print_info, use_preprocessing)
+    MsSolver(crossy_data data, bool print_info = true, bool use_preprocessing = false)
+        : PbSolver(data, print_info, use_preprocessing)
         , ipamir_used(false)
         , satisfied(false)
         , harden_goalval(0)
diff --git a/PbSolver.h b/PbSolver.h
index b9e49a0..0a6de5e 100644
--- a/PbSolver.h
+++ b/PbSolver.h
@@ -28,6 +28,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "SatSolver.h"
 #include "Map.h"
 #include "StackAlloc.h"
+#include "crossy.h"
 
 #ifdef BIG_WEIGHTS
 using weight_t = Int;
@@ -129,8 +130,8 @@ public:
     bool    convertPbs(bool first_call);   // Called from 'solve()' to convert PB constraints to clauses.
 
 public:
-    PbSolver(bool print_info = true, bool use_preprocessing = false) 
-                : sat_solver(print_info)
+    PbSolver(crossy_data data, bool print_info = true, bool use_preprocessing = false)
+                : sat_solver(data, print_info)
                 , goal(NULL)
                 , LB_goalvalue(Int_MIN)
                 , UB_goalvalue(Int_MAX)
diff --git a/SatSolver.h b/SatSolver.h
index 5fc961b..ee14b0c 100644
--- a/SatSolver.h
+++ b/SatSolver.h
@@ -25,6 +25,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "minisat/mtl/Vec.h"
 #ifdef CADICAL
 #include "CadicalWrap.h"
+#include "crossy.h"
 namespace Minisat = COMinisatPS;
 #elif defined(CRYPTOMS)
 #include "CryptoMSWrap.h"
@@ -85,7 +86,7 @@ public:
     ExtSimpSolver(bool print_info = true) { use_ccnr = false; allow_rephasing = false; 
         if (print_info) printf("c Using MergeSat SAT solver by Norbert Manthey (2022)\n"); }
 #elif defined(CADICAL)
-    ExtSimpSolver(bool print_info = true) { 
+    ExtSimpSolver(crossy_data data, bool print_info = true) : SimpSolver(data) {
         if (print_info) printf("c Using %s SAT solver by Armin Biere (2022)\n", solver->signature()); }
 #elif defined(GLUCOSE4)
     ExtSimpSolver(bool print_info = true) { 
diff --git a/config.mk b/config.mk
new file mode 100644
index 0000000..d8ab8c5
--- /dev/null
+++ b/config.mk
@@ -0,0 +1,23 @@
+BUILD_DIR?=build
+MAXPRE?=-D MAXPRE
+USESCIP?=-D USE_SCIP -pthread
+BIGWEIGHTS?=#-D BIG_WEIGHTS
+MINISATP_RELSYM?=
+MINISATP_REL?=-std=c++20 -O3 -march=haswell -D NDEBUG -Wno-strict-aliasing -D CADICAL $(MAXPRE) $(USESCIP) $(BIGWEIGHTS)
+MINISATP_DEB?=-std=c++20 -O0 -D DEBUG  -Wno-strict-aliasing -D CADICAL $(MAXPRE) $(USESCIP) $(BIGWEIGHTS)
+MINISATP_PRF?=-std=c++20 -O3 -D NDEBUG -Wno-strict-aliasing -D CADICAL $(MAXPRE) $(USESCIP) $(BIGWEIGHTS)
+MINISATP_FPIC?=-fpic
+MINISAT_INCLUDE?=-I/include -I/include/minisat -I../cominisatps -I../cadical/src
+MINISAT_LIB?=-L/lib -L../cadical/build -lcadical $(USESCIP)
+ifneq ($(MAXPRE),)
+MCL_INCLUDE?=-I../maxpre/src
+MCL_LIB?=-L../maxpre/src/lib -lmaxpre
+else
+MCL_INCLUDE?=
+MCL_LIB?=
+endif
+ifneq ($(USESCIP),)
+MCL_INCLUDE+=-I../scipoptsuite-9.0.1/scip/src -I../scipoptsuite-9.0.1/build/scip
+MCL_LIB+=-L../scipoptsuite-9.0.1/build/lib -lscip -lsoplex-pic
+endif
+prefix?=
diff --git a/crossy.h b/crossy.h
new file mode 100644
index 0000000..18128ca
--- /dev/null
+++ b/crossy.h
@@ -0,0 +1,7 @@
+#pragma once
+
+struct crossy_data {
+    int n;
+    bool *is_edge;
+    bool *is_fixed;
+};
diff --git a/ipamir.cc b/ipamir.cc
index 384435d..0edf383 100644
--- a/ipamir.cc
+++ b/ipamir.cc
@@ -35,10 +35,10 @@ struct MySolver {
         delete solver;
     }
 
-    MySolver() : nomodel(true), solving_count(0)
+    MySolver(crossy_data data) : nomodel(true), solving_count(0)
     {
         opt_verbosity = 0;
-        solver = new MsSolver(opt_verbosity > 0, true);
+        solver = new MsSolver(data, opt_verbosity > 0, true);
         solver->ipamir_used = true;
         opt_maxsat = true, opt_maxsat_msu = true; 
         opt_minimization = 1,  opt_to_bin_search = false;
@@ -79,10 +79,10 @@ IPAMIR_API const char * ipamir_signature ()
  * Required state: N/A
  * State after: INPUT
  */
-IPAMIR_API void * ipamir_init ()
+IPAMIR_API void * ipamir_init (crossy_data data)
 {
     increase_stack_size(256);
-    MySolver *s = new MySolver;
+    MySolver *s = new MySolver(data);
     pb_solver = s->solver;
     return (void*)s;
 }
diff --git a/ipamir.h b/ipamir.h
index ab2b27f..4e24929 100644
--- a/ipamir.h
+++ b/ipamir.h
@@ -6,6 +6,7 @@
 #define ipamir_h_INCLUDED
 
 #include <stdint.h>
+#include "crossy.h"
 
 /*
  * In this header, the macro IPAMIR_API is defined as follows:
@@ -65,7 +66,7 @@ IPAMIR_API const char * ipamir_signature ();
  * Required state: N/A
  * State after: INPUT
  */
-IPAMIR_API void * ipamir_init ();
+IPAMIR_API void * ipamir_init (crossy_data data);
 
 /**
  * Release the solver, i.e., all its resources and allocated memory. The solver
